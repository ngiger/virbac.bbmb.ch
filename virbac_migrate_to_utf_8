#!/usr/bin/env ruby
# encoding: ASCII-8BIT
require 'fileutils'
require 'syck'
require 'pry'

here = File.expand_path(File.join(File.dirname(File.dirname(__FILE__)), 'lib'))
$: << here
require 'logger'
require 'needle'
require 'odba/id_server'
require 'rrba/server'
require 'bbmb/config'
require 'bbmb/model/customer'
require 'bbmb/model/quota'
require 'bbmb/model/product'
require 'bbmb/model/promotion'
require 'yus/entity'
require 'yus/privilege'
require 'odba/connection_pool'
require 'odba/drbwrapper'
require 'ydim/invoice'
require 'ydim/autoinvoicer'
require 'ydim/factory'
require 'bbmb/persistence/odba'

module BBMB
  @config.load_files.each { |local| require local }
  require File.join('bbmb', 'persistence', @config.persistence)
  class Server
    # http://stackoverflow.com/questions/2982677/ruby-1-9-invalid-byte-sequence-in-utf-8
    # https://robots.thoughtbot.com/fight-back-utf-8-invalid-byte-sequences
    def sanitize_utf8(string)
      return nil if string.nil?
      # return string.encode('UTF-8', 'binary', invalid: :replace, undef: :replace, replace: '')
      return string if string.valid_encoding?
      if string.force_encoding(Encoding::ISO_8859_1).valid_encoding?
        string.force_encoding(Encoding::ISO_8859_1).clone.encode(Encoding::UTF_8)
      else
        string.chars.select { |c| c.valid_encoding? }.join
      end
    end
    def _migrate_to_utf8 queue, table, opts={}
      while obj = queue.shift do
        if obj.is_a?(Numeric)
          begin
            obj = ODBA.cache.fetch obj
          rescue ODBA::OdbaError
            return
          end
        else
          obj = obj.odba_instance
        end
        puts " #{__LINE__}: Migrating #{obj.class} #{obj.to_s}" if $VERBOSE
        return unless obj
        _migrate_obj_to_utf8 obj, queue, table, opts
        obj.odba_store unless obj.odba_unsaved?
      end
    end
    def _migrate_obj_to_utf8 obj, queue, table, opts={}
      obj.instance_variables.each do |name|
        child = obj.instance_variable_get name
        if child.respond_to?(:odba_unsaved?) && !child.odba_unsaved? \
          && obj.respond_to?(:odba_serializables) \
          && obj.odba_serializables.include?(name)
          child.instance_variable_set '@odba_persistent', nil
        end
        child = _migrate_child_to_utf8 child, queue, table, opts
        obj.instance_variable_set name, child
      end
      if obj.is_a?(Array)
        obj.collect! do |child|
          _migrate_child_to_utf8 child, queue, table, opts
        end
      end
      if obj.is_a?(Hash)
        obj.dup.each do |key, child|
          obj.store key, _migrate_child_to_utf8(child, queue, table, opts)
        end
      end
      obj
    end
    def _migrate_child_to_utf8 child, queue, table, opts={}
      @serialized ||= {}
      case child
      when ODBA::Persistable, ODBA::Stub
        if child = child.odba_instance
          if child.odba_unsaved?
            _migrate_to_utf8 [child], table, opts
          elsif opts[:all]
            odba_id = child.odba_id
            unless table[odba_id]
              table.store odba_id, true
              queue.push odba_id
            end
          end
        end
      when String
        old = child.encoding
        orig = child.clone
        if ( child.encoding != Encoding::UTF_8 && child.force_encoding(Encoding::ISO_8859_1).valid_encoding? ) ||
           ( child.encoding == Encoding::UTF_8 && !child.valid_encoding? )
          child = child.force_encoding(Encoding::UTF_8)
          puts "force_encoding from ISO_8859_1 #{old}. Now #{child}" unless child.to_i > 0
        end
        case child.encoding.to_s
        when /ASCII-8BIT|US-ASCII/
          # nothing todo
        when /UTF-8/
          puts "UTF-8: for #{child.to_s}" if $VERBOSE
          child = sanitize_utf8(child)
        when /ISO-8859-1/i
          child = sanitize_utf8(child)
          # child = child.force_encoding('UTF-8')
          puts "force_encoding from #{old}. is now #{child}"
        else
          puts "Unhandeled encoding #{child.encoding}"
        # child = child.force_encoding
        end
      when
        Yus::Entity,
        Yus::Privilege,
        BBMB::Model::Customer,
        BBMB::Model::Quota,
        BBMB::Model::ProductInfo,
        BBMB::Model::Promotion,
        YDIM::AutoInvoice,
        YDIM::Debitor,
        YDIM::Debitor,
        YDIM::Invoice,
        YDIM::Invoice::Info,
        YDIM::Item
        child = _migrate_obj_to_utf8 child, queue, table, opts
      when Float, Fixnum, TrueClass, FalseClass, NilClass,
        Symbol, Time, Date, DateTime,
        YDIM::Factory,
        YDIM::CurrencyConverter,
        YDIM::MobileCurrencyConverter
        # do nothing
      else
        @ignored ||= {}
        unless @ignored[child.class]
          @ignored.store child.class, true
          warn "ignoring #{child.class}"
        end
      end
      child
    rescue SystemStackError
      puts child.class
      binding.pry
      raise
    end
  end
end

@logger = Logger.new("/tmp/#{File.basename(__FILE__)}.log")
@logger.level = Logger::DEBUG
@logger.info  "#{Time.now}: Calling  #{File.basename(__FILE__)}"

module Yus
  class Entity
    include ODBA::Persistable
    class << self
      alias :all :odba_extent
    end
  end
  class Privilege
    include ODBA::Persistable
    class << self
      alias :all :odba_extent
    end
  end
end
module BBMB
  module Model
    class Order
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class ProductInfo
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Customer
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Promotion
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Quota
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Subject
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
  end
end

module BBMB
  end
  begin
    @server = BBMB::Server.new()
    @server.extend(DRbUndumped)
    puts "#{Time.now}: Calling update #{File.basename(__FILE__)}"
    {
    #  :entitites => Yus::Entity.odba_extent,
    #  :privileges => Yus::Privilege.odba_extent,
      :customers => BBMB::Model::Customer.odba_extent,
      :quotas => BBMB::Model::Quota.odba_extent,
      :products => BBMB::Model::ProductInfo.odba_extent,
      :promotions => BBMB::Model::Promotion.odba_extent,
      }.each do |name, to_migrate|
      @logger.info "#{Time.now}: Start migrating #{to_migrate.size} #{name}"
      @server._migrate_to_utf8(to_migrate, {})
    end
    puts "#{Time.now}: Finished #{File.basename(__FILE__)}"
  rescue Exception => error
    @logger.error('fatal') { error }
    raise
end

# ODBA.storage.dbi = ODBA::ConnectionPool.new(BBMB.config.db_driver_url, BBMB.config.db_user, BBMB.config.db_auth, :client_encoding => 'LATIN1')
# ODBA.cache.setup
# DRb.install_id_conv ODBA::DRbIdConv.new
