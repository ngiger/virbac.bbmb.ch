#!/usr/bin/env ruby

$: << File.expand_path('../lib', File.dirname(__FILE__))
require 'bbmb/virbac/app'
require 'bbmb/util/csv_importer'
require 'bbmb/util/server'

module BBMB
  def self.check_workdir(msg)
    work_dir = File.expand_path(File.dirname(File.dirname(__FILE__)))
    puts "#{Time.now} #{msg}: workdir is #{work_dir} bbmb_dir is #{BBMB.config.bbmb_dir} Dir. pwd is #{Dir.pwd}"
    Dir.chdir(work_dir) unless Dir.pwd.eql?(work_dir)
    BBMB.config.bbmb_dir = work_dir
  end
  log_file = '/tmp/' + File.basename(__FILE__)+ '.log'
  BBMB.check_workdir("log_file is #{log_file}")
  FileUtils.mkdir_p(File.dirname(log_file))
  log_file = File.open(log_file, 'a')
  log_file.sync= true
  at_exit { log_file.close }
  @logger = Logger.new(log_file)
  @logger.level = Logger::DEBUG
  @logger.debug('config') { @config.pretty_inspect }
  begin
    $stdout.sync = true
    start_seconds = Time.now.to_i
    bbmb = DRbObject.new(nil, BBMB.config.server_url)
    BBMB.check_workdir("Before bbmb #{bbmb}")
    bbmb.update
    seconds = Time.now.to_i-start_seconds
    puts "#{Time.now}: Finished update after #{(seconds/60).to_i} minutes and #{(seconds % 60).to_i} seconds"
  rescue Exception => error
    @logger.error('fatal') { error }
    raise
  end
  at_exit do
    BBMB.check_workdir('at_exit time')
  end
end
