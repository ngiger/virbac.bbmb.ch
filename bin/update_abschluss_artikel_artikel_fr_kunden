#!/usr/bin/env ruby

$: << File.expand_path('../lib', File.dirname(__FILE__))

require 'drb'
require 'syck'
require 'logger'
require 'ydim/invoice'
require 'bbmb/config'
require 'bbmb/util/server'
require 'bbmb/util/csv_importer'
require 'mail'

module BBMB
  def self.check_workdir(msg)
    work_dir = File.expand_path(File.dirname(File.dirname(__FILE__)))
    puts "#{Time.now} #{msg}: workdir is #{work_dir} bbmb_dir is #{BBMB.config.bbmb_dir} Dir. pwd is #{Dir.pwd}"
    Dir.chdir(work_dir) unless Dir.pwd.eql?(work_dir)
    BBMB.config.bbmb_dir = work_dir
  end
  [ File.join(Dir.pwd, 'etc', 'config.yml'),
  ].each do |config_file|
    if File.exist?(config_file)
      puts "BBMB.config.load from #{config_file}"
      BBMB.config.load (config_file)
      break
    end
  end
  require File.join('bbmb', 'persistence', @config.persistence)
  case @config.persistence
  when 'odba'
    DRb.install_id_conv ODBA::DRbIdConv.new
    @persistence = BBMB::Persistence::ODBA
  end

  log_file = '/tmp/' + File.basename(__FILE__)+ '.log'
  BBMB.check_workdir("log_file is #{log_file}")
  FileUtils.mkdir_p(File.dirname(log_file))
  log_file = File.open(log_file, 'a')
  log_file.sync= true
  at_exit { log_file.close }
  @logger = Logger.new(log_file)
  @logger.level = Logger::DEBUG
  @logger.debug('config') { @config.pretty_inspect }
  auth_domain = BBMB.config.auth_domain
  @auth = DRb::DRbObject.new(nil, @config.auth_url)
  bbmb = DRbObject.new(nil, BBMB.config.server_url)

  begin
    # @server = BBMB::Util::Server.new(@persistence)
    @server = BBMB::Util::RackInterface.new
    @server.extend(DRbUndumped)
    $stdout.sync = true
    start_seconds = Time.now.to_i
    BBMB.check_workdir('Before update')
    @server.update
    seconds = Time.now.to_i-start_seconds
    puts "#{Time.now}: Finished update after #{(seconds/60).to_i} minutes and #{(seconds % 60).to_i} seconds"
  rescue Exception => error
    @logger.error('fatal') { error }
    raise
  end
  at_exit do
    BBMB.check_workdir('at_exit time')
  end
end
